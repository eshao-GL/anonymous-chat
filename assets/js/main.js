class ChatRoom {
    constructor() {
        // È¶ñÂÖàÂàùÂßãÂåñÂÆ¢Êà∑Á´ØID
        this.initializeClientId();
        
        // Ëé∑ÂèñDOMÂÖÉÁ¥†
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.emojiBtn = document.getElementById('emojiBtn');
        this.imageBtn = document.getElementById('imageBtn');
        this.audioBtn = document.getElementById('audioBtn');
        this.imagePreviewModal = document.getElementById('imagePreviewModal');
        this.notificationSound = document.getElementById('notificationSound');
        
        // ÂàùÂßãÂåñÁä∂ÊÄÅ
        this.isRecording = false;
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.lastMessageId = null;
        this.isPolling = false;
        this.touchStartY = 0;
        this.isScrolling = false;
        
        // Ê∑ªÂä†Ê∂àÊÅØÁºìÂ≠ò
        this.messageCache = new Map();
        
        // Ëé∑ÂèñÂú®Á∫ø‰∫∫Êï∞ÂÖÉÁ¥†Ôºà‰∏çÂÜçÂàõÂª∫Êñ∞ÂÖÉÁ¥†Ôºâ
        this.onlineCount = document.querySelector('.online-count');
        
        // Ê∑ªÂä†Êñ∞Ê∂àÊÅØÊèêÁ§∫ÂÖÉÁ¥†
        this.newMessagesAlert = document.createElement('div');
        this.newMessagesAlert.className = 'new-messages-alert';
        this.newMessagesAlert.style.display = 'none';
        this.newMessagesAlert.addEventListener('click', () => {
            this.scrollToBottom();
            this.hideNewMessagesAlert();
        });
        document.body.appendChild(this.newMessagesAlert);
        
        // Ê∑ªÂä†Êú™ËØªÊ∂àÊÅØËÆ°Êï∞
        this.unreadCount = 0;
        
        // ‰øÆÊîπÈü≥ÊïàÊí≠ÊîæÁä∂ÊÄÅÁöÑÂàùÂßãÂåñ
        this.soundEnabled = false;
        
        // Â∞ùËØïÈ¢ÑÂä†ËΩΩÈü≥È¢ë
        this.notificationSound.load();
        
        // ÂàùÂßãÂåñÈü≥Êïà
        this.notificationSound.volume = 1;
        
        // Ê∑ªÂä†Áî®Êà∑‰∫§‰∫íÁõëÂê¨ÔºåÁî®‰∫éÂêØÁî®Èü≥Êïà
        document.addEventListener('click', () => {
            this.notificationSound.play().then(() => {
                this.notificationSound.pause();
                this.soundEnabled = true;
            }).catch(() => {});
        }, { once: true });
        
        this.initializeEventListeners();
        this.initializeEmojiPicker();
        this.initializeImagePreview();
        this.initializeAudioPlayers();
        
        // ÂºÄÂßãËΩÆËØ¢Êñ∞Ê∂àÊÅØÂíåÂú®Á∫ø‰∫∫Êï∞
        this.startPolling();
        this.startOnlinePolling();
        
        // Ê∑ªÂä†Ëß¶Êë∏ÂíåÊªöÂä®ÊéßÂà∂
        this.initializeTouchControl();
        
        // Ê∑ªÂä†È°µÈù¢Âç∏ËΩΩ‰∫ã‰ª∂
        window.addEventListener('beforeunload', () => {
            // ÂèëÈÄÅÁî®Êà∑Á¶ªÁ∫øËØ∑Ê±Ç
            navigator.sendBeacon('api/user_offline.php');
        });
        
        // Ê∑ªÂä†ËÆæÁΩÆÁõ∏ÂÖ≥ÂÖÉÁ¥†
        this.settingsBtn = document.getElementById('settingsBtn');
        this.settingsModal = document.getElementById('settingsModal');
        this.settingsClose = document.querySelector('.settings-close');
        this.nicknameInput = document.getElementById('nicknameInput');
        this.currentAvatar = document.getElementById('currentAvatar');
        this.avatarInput = document.getElementById('avatarInput');
        this.changeAvatarBtn = document.getElementById('changeAvatarBtn');
        this.saveSettingsBtn = document.getElementById('saveSettingsBtn');
        
        // ÂàùÂßãÂåñËÆæÁΩÆ
        this.initializeSettings();
        
        // ÂàùÂßãÂåñÁî®Êà∑Áä∂ÊÄÅÁõëÂê¨
        this.initializeUserStatus();
        
        // Â∞ÜÂÆû‰æã‰øùÂ≠òÂà∞ÂÖ®Â±ÄÂèòÈáè
        window.chatRoom = this;
    }
    
    initializeEventListeners() {
        // ÂèëÈÄÅÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        
        // ËæìÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÂõûËΩ¶ÂèëÈÄÅ
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // ÂõæÁâá‰∏ä‰º†
        this.imageBtn.addEventListener('click', () => {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = (e) => this.handleImageUpload(e.target.files[0]);
            input.click();
        });
        
        // ÂΩïÈü≥ÊåâÈíÆ
        this.audioBtn.addEventListener('click', () => this.toggleAudioRecording());
        
        // Ëá™Âä®Ë∞ÉÊï¥ËæìÂÖ•Ê°ÜÈ´òÂ∫¶
        this.messageInput.addEventListener('input', () => {
            this.messageInput.style.height = 'auto';
            this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 150) + 'px';
        });
        
        // ‰ΩøÁî® passive ÁõëÂê¨ÊªöÂä®‰∫ã‰ª∂‰ª•ÊèêÈ´òÊÄßËÉΩ
        this.chatMessages.addEventListener('scroll', () => {
            const isAtBottom = this.chatMessages.scrollHeight - this.chatMessages.scrollTop <= this.chatMessages.clientHeight + 50;
            if (isAtBottom) {
                this.hideNewMessagesAlert();
            }
        }, { passive: true });
    }
    
    initializeEmojiPicker() {
        const emojis = ['üòä', 'üòÇ', 'ü§£', '‚ù§Ô∏è', 'üëç', 'üåü', 'ü§î', 'üò¢', 'üôè', 'ü•∞', 'ü§ó'];
        const picker = document.createElement('div');
        picker.className = 'emoji-picker';
        
        emojis.forEach(emoji => {
            const span = document.createElement('span');
            span.textContent = emoji;
            span.onclick = () => {
                this.messageInput.value += emoji;
                picker.style.display = 'none';
            };
            picker.appendChild(span);
        });
        
        this.emojiBtn.parentNode.appendChild(picker);
        
        this.emojiBtn.onclick = () => {
            picker.style.display = picker.style.display === 'grid' ? 'none' : 'grid';
        };
        
        document.addEventListener('click', (e) => {
            if (!this.emojiBtn.contains(e.target) && !picker.contains(e.target)) {
                picker.style.display = 'none';
            }
        });
    }
    
    initializeImagePreview() {
        this.imagePreviewModal.addEventListener('click', () => {
            this.imagePreviewModal.classList.remove('active');
        });
    }
    
    initializeAudioPlayers() {
        this.chatMessages.addEventListener('click', (e) => {
            const player = e.target.closest('.audio-player');
            if (!player) return;
            
            const audio = document.getElementById(player.dataset.audioId);
            const playIcon = player.querySelector('.audio-play-btn i');
            
            if (audio.paused) {
                // ÂÅúÊ≠¢ÊâÄÊúâÂÖ∂‰ªñÊ≠£Âú®Êí≠ÊîæÁöÑÈü≥È¢ë
                document.querySelectorAll('audio').forEach(a => {
                    if (a !== audio && !a.paused) {
                        a.pause();
                        const otherPlayer = document.querySelector(`[data-audio-id="${a.id}"]`);
                        otherPlayer.classList.remove('playing');
                        otherPlayer.querySelector('i').className = 'fas fa-play';
                    }
                });
                
                // Êí≠ÊîæÂΩìÂâçÈü≥È¢ë
                audio.play().then(() => {
                    player.classList.add('playing');
                    playIcon.className = 'fas fa-pause';
                }).catch(error => {
                    console.error('Êí≠ÊîæÂ§±Ë¥•:', error);
                    alert('Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•ÔºåÔøΩÔøΩÔøΩÈáçËØï');
                    playIcon.className = 'fas fa-play';
                });
            } else {
                audio.pause();
                player.classList.remove('playing');
                playIcon.className = 'fas fa-play';
            }
            
            // ÊîæÊùüÊó∂ÈáçÁΩÆ
            audio.addEventListener('ended', () => {
                player.classList.remove('playing');
                playIcon.className = 'fas fa-play';
            });
        });
    }
    
    initializeTouchControl() {
        let startY = 0;
        let startScrollTop = 0;
        
        this.chatMessages.addEventListener('touchstart', (e) => {
            startY = e.touches[0].pageY;
            startScrollTop = this.chatMessages.scrollTop;
            this.isScrolling = true;
        });
        
        this.chatMessages.addEventListener('touchmove', (e) => {
            const deltaY = e.touches[0].pageY - startY;
            this.chatMessages.scrollTop = startScrollTop - deltaY;
        });
        
        this.chatMessages.addEventListener('touchend', () => {
            // Âª∂ËøüÈáçÁΩÆÊªöÂä®Áä∂ÊÄÅÔºåËÆ©ÊúÄÂêéÁöÑÊªöÂä®Âä®ÁîªÂÆåÊàê
            setTimeout(() => {
                this.isScrolling = false;
            }, 100);
        });
    }
    
    async sendMessage(type = 'text', content = null) {
        const messageContent = content || this.messageInput.value.trim();
        if (!messageContent) return;
        
        try {
            const response = await fetch('api/send_message.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: type,
                    content: messageContent,
                    clientId: this.clientId
                })
            });
            
            const result = await response.json();
            
            if (!response.ok || !result.success) {
                throw new Error(result.message || 'ÂèëÈÄÅÂ§±Ë¥•');
            }
            
            // ÂèëÈÄÅÁ¨¨‰∏ÄÊù°Ê∂àÊÅØÂêéÂêØÁî®Èü≥Êïà
            this.soundEnabled = true;
            
            // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
            if (type === 'text') {
                this.messageInput.value = '';
                this.messageInput.style.height = 'auto';
            }
            
            // Á´ãÂç≥Ëé∑ÂèñÊñ∞Ê∂àÊÅØ
            this.pollMessages();
            
        } catch (error) {
            console.error('ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', error);
            alert('ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•: ' + error.message);
        }
    }
    
    async handleImageUpload(file) {
        try {
            // ÊòæÁ§∫‰∏ä‰º†ËøõÂ∫¶ÊèêÁ§∫
            const loadingMessage = this.showLoadingMessage('Ê≠£Âú®‰∏ä‰º†ÂõæÁâá...');
            
            const formData = new FormData();
            formData.append('file', file);
            
            const response = await fetch('api/upload_file.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            this.removeLoadingMessage(loadingMessage);
            
            if (!result.success) {
                throw new Error(result.message || '‰∏ä‰º†Â§±Ë¥•');
            }
            
            await this.sendMessage('image', result.filename);
            
        } catch (error) {
            console.error('‰∏ä‰º†ÂõæÁâáÂ§±Ë¥•:', error);
            alert('‰∏ä‰º†ÂõæÁâáÂ§±Ë¥•: ' + error.message);
        }
    }
    
    async toggleAudioRecording() {
        try {
            if (!this.isRecording) {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                
                this.audioChunks = [];
                
                const options = {
                    mimeType: MediaRecorder.isTypeSupported('audio/webm') ? 'audio/webm' : 'audio/ogg'
                };
                
                this.mediaRecorder = new MediaRecorder(stream, options);
                
                this.mediaRecorder.ondataavailable = (e) => {
                    if (e.data.size > 0) {
                        this.audioChunks.push(e.data);
                    }
                };
                
                this.mediaRecorder.onstop = async () => {
                    try {
                        const mimeType = this.mediaRecorder.mimeType;
                        const audioBlob = new Blob(this.audioChunks, { type: mimeType });
                        
                        const audioFile = new File([audioBlob], 'audio.' + (mimeType.includes('webm') ? 'webm' : 'ogg'), {
                            type: mimeType,
                            lastModified: Date.now()
                        });
                        
                        await this.uploadAudio(audioFile);
                    } catch (error) {
                        console.error('Â§ÑÁêÜÂΩïÈü≥Êï∞ÊçÆÂ§±Ë¥•:', error);
                        alert('Â§ÑÁêÜÂΩïÈü≥Â§±Ë¥•: ' + error.message);
                    } finally {
                        stream.getTracks().forEach(track => track.stop());
                    }
                };
                
                // ÂºÄÂßãÂΩïÈü≥
                this.mediaRecorder.start();
                this.isRecording = true;
                this.audioBtn.classList.add('recording');
                
                // Ê∑ªÂä†ÂΩïÈü≥ÊåáÁ§∫Âô®
                const indicator = document.createElement('div');
                indicator.className = 'recording-indicator';
                indicator.innerHTML = `
                    <div class="recording-dot"></div>
                    <span>Ê≠£Âú®ÂΩïÈü≥...</span>
                `;
                this.audioBtn.parentNode.appendChild(indicator);
                
                // 3ÁßíÂêéËá™Âä®ÂÅúÊ≠¢ÂΩïÈü≥
                setTimeout(() => {
                    if (this.isRecording) {
                        this.toggleAudioRecording();
                    }
                }, 3000);
                
            } else {
                // ÂÅúÊ≠¢ÂΩïÈü≥
                this.mediaRecorder.stop();
                this.isRecording = false;
                this.audioBtn.classList.remove('recording');
                
                // Èô§ÂΩïÈü≥ÊåáÁ§∫Âô®
                const indicator = document.querySelector('.recording-indicator');
                if (indicator) {
                    indicator.remove();
                }
            }
        } catch (error) {
            console.error('ÂΩïÈü≥Â§±Ë¥•:', error);
            alert('Êó†Ê≥ïËÆøÈóÆÈ∫¶ÂÖãÈ£éÔºåËØ∑Á°Æ‰øùÂ∑≤Êéà‰∫àÂΩïÈü≥ÊùÉÈôê');
        }
    }
    
    async uploadAudio(audioFile) {
        try {
            const loadingMessage = this.showLoadingMessage('Ê≠£Âú®‰∏ä‰º†ËØ≠Èü≥...');
            
            const formData = new FormData();
            formData.append('file', audioFile);
            
            const response = await fetch('api/upload_file.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            this.removeLoadingMessage(loadingMessage);
            
            if (!response.ok || !result.success) {
                throw new Error(result.message || '‰∏ä‰º†Â§±Ë¥•');
            }
            
            await this.sendMessage('audio', result.filename);
            
        } catch (error) {
            console.error('‰∏ä‰º†ËØ≠Èü≥Â§±Ë¥•:', error);
            alert('‰∏ä‰º†ËØ≠Èü≥Â§±Ë¥•: ' + error.message);
        }
    }
    
    showLoadingMessage(text) {
        const loadingMessage = document.createElement('div');
        loadingMessage.className = 'loading-message';
        loadingMessage.innerHTML = `
            <div class="loading-spinner"></div>
            <div class="loading-text">${text}</div>
        `;
        this.chatMessages.appendChild(loadingMessage);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        return loadingMessage;
    }
    
    removeLoadingMessage(loadingMessage) {
        if (loadingMessage && loadingMessage.parentNode) {
            loadingMessage.remove();
        }
    }
    
    startPolling() {
        // ÊØè500ÁßíËΩÆËØ¢‰∏ÄÊ¨°
        setInterval(() => this.pollMessages(), 500);
    }
    
    async pollMessages() {
        if (this.isPolling) return;
        
        try {
            this.isPolling = true;
            
            const response = await fetch(`api/get_messages.php${this.lastMessageId ? `?after=${this.lastMessageId}` : ''}`);
            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || 'Ëé∑ÂèñÊ∂àÊÅØÂ§±Ë¥•');
            }
            
            const newMessages = result.data;
            if (newMessages.length === 0) return;
            
            // Ê£ÄÊü•ÊòØÂê¶Âú®Â∫ïÈÉ®
            const isAtBottom = this.chatMessages.scrollHeight - this.chatMessages.scrollTop <= this.chatMessages.clientHeight + 50;
            
            // Âè™Âú®ÊúâlastMessageIdÊó∂Ôºà‰∏çÊòØÈ¶ñÊ¨°Âä†ËΩΩÔºâÊâçÊ£ÄÊü•Êñ∞Ê∂àÊÅØ
            if (this.lastMessageId !== null) {
                // Â¶ÇÊûú‰∏çÂú®Â∫ïÈÉ®‰∏îÊúâÊñ∞Ê∂àÊÅØ
                if (!isAtBottom) {
                    // Âè™ÁªüËÆ°ÔøΩÔøΩÔøΩÊòØËá™Â∑±ÂèëÁöÑÊñ∞Ê∂àÊÅØ
                    const unreadMessages = newMessages.filter(msg => 
                        msg.clientId !== this.clientId && 
                        !this.messageCache.has(msg.id)
                    );
                    
                    if (unreadMessages.length > 0) {
                        this.unreadCount += unreadMessages.length;
                        this.showNewMessagesAlert();
                    }
                }
            }
            
            // Â§ÑÁêÜÊØèÊñ∞Ê∂àÊÅØ
            for (const msg of newMessages) {
                if (this.messageCache.has(msg.id)) continue;
                
                // Âè™‰∏∫ÂÖ∂‰ªñÂÆ¢Êà∑Á´ØÁöÑÊ∂àÊÅØÊí≠ÊîæÈü≥Êïà
                if (msg.clientId && msg.clientId !== this.clientId) {
                    await this.playNotificationSound();
                }
                
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                messageDiv.dataset.self = msg.clientId === this.clientId ? 'true' : 'false';
                
                // Ê∑ªÂä†Áî®Êà∑‰ø°ÊÅØ
                const userInfoDiv = document.createElement('div');
                userInfoDiv.className = 'message-user-info';
                
                // Ê∑ªÂä†Â§¥ÂÉè
                const avatarImg = document.createElement('img');
                avatarImg.src = msg.avatar || 'assets/avatars/default.jpg';
                avatarImg.className = 'message-avatar';
                avatarImg.alt = 'Áî®Êà∑Â§¥ÂÉè';
                userInfoDiv.appendChild(avatarImg);
                
                // Ê∑ªÂä†Áî®Êà∑‰ø°ÊÅØÂÆπÂô®ÔºàÊòµÁß∞ÂíåÊó∂Èó¥Ôºâ
                const userTextInfo = document.createElement('div');
                userTextInfo.className = 'user-text-info';
                
                // Ê∑ªÂä†ÊòµÁß∞
                if (msg.nickname) {
                    const nicknameDiv = document.createElement('div');
                    nicknameDiv.className = 'message-nickname';
                    nicknameDiv.textContent = msg.nickname;
                    userTextInfo.appendChild(nicknameDiv);
                }
                
                // Ê∑ªÂä†Êó∂Èó¥
                const timeDiv = document.createElement('div');
                timeDiv.className = 'message-time';
                const messageDate = new Date(msg.timestamp * 1000);
                const dateStr = `${msg.date.year}-${msg.date.month}-${msg.date.day} ${messageDate.toLocaleTimeString()}`;
                timeDiv.textContent = dateStr;
                userTextInfo.appendChild(timeDiv);
                
                userInfoDiv.appendChild(userTextInfo);
                messageDiv.appendChild(userInfoDiv);
                
                // Ê†πÊçÆÊ∂àÊÅØÁ±ªÂûãÂàõ‰∏çÂêåÁöÑÂÜÖÂÆπ
                let content = '';
                switch (msg.type) {
                    case 'text':
                        content = `<div class="message-text">${this.escapeHtml(msg.content)}</div>`;
                        break;
                    case 'image':
                        content = `<img src="assets/uploads/${msg.content}" alt="ÂõæÁâáÊÅØ" class="message-image" onclick="document.getElementById('imagePreviewModal').querySelector('img').src = this.src; document.getElementById('imagePreviewModal').classList.add('active');">`;
                        break;
                    case 'audio':
                        const audioId = `audio-${msg.id}`;
                        content = `
                            <div class="audio-player" data-audio-id="${audioId}">
                                <audio id="${audioId}" preload="metadata">
                                    <source src="assets/uploads/${msg.content}" type="audio/webm">
                                    <source src="assets/uploads/${msg.content}" type="audio/ogg">
                                </audio>
                                <button class="audio-play-btn">
                                    <i class="fas fa-play"></i>
                                </button>
                                <div class="audio-info">
                                    <div class="audio-wave">
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                    </div>
                                </div>
                            </div>`;
                        break;
                    case 'system':
                        content = `<div class="message-system">${msg.content}</div>`;
                        break;
                    default:
                        content = `<div class="message-text">‰∏çÊîØÊåÅÁöÑÊ∂àÊÅØÁ±ªÂûã</div>`;
                }
                
                // Âú®Ê∑ªÂä†Ê∂àÊÅØÂÜÖÂÆπ‰πãÂâçÔºåÂàõÂª∫‰∏Ä‰∏™ÂÜÖÂÆπÂÆπÂô®
                const contentContainer = document.createElement('div');
                contentContainer.className = 'message-content';
                
                // Â∞ÜÂÜÖÂÆπÊ∑ªÂä†Âà∞ÂÆπÂô®‰∏≠
                contentContainer.innerHTML = content;
                
                // Â∞ÜÂÆπÂô®Ê∑ªÂä†Âà∞Ê∂àÊÅØdiv‰∏≠
                messageDiv.appendChild(contentContainer);
                
                // Ê∑ªÂä†Ê∂àÊÅØÂà∞ËÅäÂ§©Á™óÂè£
                this.chatMessages.appendChild(messageDiv);
                this.messageCache.set(msg.id, true);
            }
            
            // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊù°Ê∂àÊÅØÁöÑID
            if (newMessages.length > 0) {
                this.lastMessageId = newMessages[newMessages.length - 1].id;
            }
            
            // Â¶ÇÊûúÂú®Â∫ïÈÉ®ÔºåËá™Âä®ÊªöÂä®Âπ∂ÈöêËóèÊèêÁ§∫
            if (isAtBottom) {
                this.scrollToBottom();
                this.hideNewMessagesAlert();
            }
            
        } catch (error) {
            console.error('ËΩÆËØ¢Ê∂àÊÅØÂ§±Ë¥•:', error);
            this.lastMessageId = null;
            this.messageCache.clear();
        } finally {
            this.isPolling = false;
        }
    }
    
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
    
    // Ê∑ªÂä†Âú®Á∫ø‰∫∫Êï∞ËΩÆËØ¢ÊñπÊ≥ï
    startOnlinePolling() {
        // Á´ãÂç≥ÊâßË°å‰∏ÄÊ¨°
        this.pollOnlineCount();
        // ÊØè3ÁßíËΩÆËØ¢‰∏ÄÊ¨°
        setInterval(() => this.pollOnlineCount(), 3000);
    }
    
    async pollOnlineCount() {
        try {
            const response = await fetch('api/online_users.php');
            const result = await response.json();
            
            if (result.success) {
                this.onlineCount.textContent = `Âú®Á∫ø‰∫∫Êï∞: ${result.online_count}`;
            }
        } catch (error) {
            console.error('Ëé∑ÂèñÂú®Á∫ø‰∫∫Êï∞Â§±Ë¥•:', error);
        }
    }
    
    // ‰øÆÊîπÊòæÁ§∫Êñ∞Ê∂àÊÅØÊèêÁ§∫ÁöÑÊñπÊ≥ï
    showNewMessagesAlert() {
        this.newMessagesAlert.innerHTML = `
            <span>${this.unreadCount}Êù°Êñ∞Ê∂àÊÅØ</span>
            <i class="fas fa-chevron-down" style="margin-left: 8px;"></i>
        `;
        this.newMessagesAlert.style.display = 'block';
    }
    
    // Ê∑ªÂä†ÈöêËóèÊñ∞Ê∂àÊÅØÊèêÁ§∫ÁöÑÊñπÊ≥ï
    hideNewMessagesAlert() {
        this.newMessagesAlert.style.display = 'none';
        this.unreadCount = 0;
    }
    
    // ‰øÆÊîπÊªöÂä®Âà∞Â∫ïÈÉ®ÁöÑÊñπÊ≥ï
    scrollToBottom() {
        this.chatMessages.scrollTo({
            top: this.chatMessages.scrollHeight,
            behavior: 'auto' // ‰øÆÊîπ‰∏∫ autoÔºåÁßªÈô§Âπ≥ÊªëÊªöÂä®
        });
    }
    
    // Ê∑ªÂä†ÂàùÂßãÂåñ clientId ÁöÑÊñπÊ≥ï
    initializeClientId() {
        // ‰ΩøÁî® localStorage ËÄå‰∏çÊòØ sessionStorageÔºåËøôÊ†∑Âà∑Êñ∞È°µÈù¢Âêé ID ‰∏ç‰ºöÊîπÂèò
        let clientId = localStorage.getItem('chatClientId');
        
        // Â¶ÇÊûúÊ≤°ÊúâÔºåÁîüÊàê‰∏Ä‰∏™Êñ∞ÁöÑ
        if (!clientId) {
            const random = Math.random().toString(36).substring(2, 15);
            const timestamp = Date.now();
            const userAgent = navigator.userAgent.replace(/[^a-zA-Z0-9]/g, '');
            clientId = `${random}_${timestamp}_${userAgent.substring(0, 10)}`;
            localStorage.setItem('chatClientId', clientId);
        }
        
        this.clientId = clientId;
        console.log('Client ID:', this.clientId); // Ê∑ªÂä†Êó•Âøó
    }
    
    // ÁÆÄÂåñÈü≥ÊïàÊí≠ÊîæÊñπÊ≥ï
    async playNotificationSound() {
        if (!this.soundEnabled) {
            return;
        }
        
        try {
            this.notificationSound.currentTime = 0;
            await this.notificationSound.play();
        } catch (error) {
            console.error('Êí≠ÊîæÈÄöÁü•Èü≥ÊïàÂ§±Ë¥•:', error);
        }
    }
    
    initializeSettings() {
        // ÊâìÂºÄËÆæÁΩÆ
        this.settingsBtn.addEventListener('click', () => {
            this.settingsModal.classList.add('active');
        });
        
        // ÂÖ≥Èó≠ËÆæÁΩÆ
        this.settingsClose.addEventListener('click', () => {
            this.settingsModal.classList.remove('active');
        });
        
        // Êõ¥Êç¢Â§¥ÂÉè
        this.changeAvatarBtn.addEventListener('click', () => {
            this.avatarInput.click();
        });
        
        this.avatarInput.addEventListener('change', (e) => {
            if (e.target.files && e.target.files[0]) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    this.currentAvatar.src = e.target.result;
                };
                reader.readAsDataURL(e.target.files[0]);
            }
        });
        
        // ‰øùÂ≠òËÆæÁΩÆ
        this.saveSettingsBtn.addEventListener('click', () => this.saveSettings());
        
        // Âä†ËΩΩ‰øùÂ≠òÁöÑËÆæÁΩÆ
        this.loadSettings();
        
        // Ê∑ªÂä†ËÆæÂ§¥ÂÉèÊåâÈíÆ
        this.chooseAvatarBtn = document.getElementById('chooseAvatarBtn');
        this.presetAvatars = document.querySelector('.preset-avatars');
        
        // Âä†ËΩΩÈ¢ÑËÆæÂ§¥ÂÉè
        this.loadPresetAvatars();
        
        // ÂàáÊç¢È¢ÑËÆæÂ§¥ÂÉèÊòæÁ§∫
        this.chooseAvatarBtn.addEventListener('click', () => {
            this.presetAvatars.style.display = 
                this.presetAvatars.style.display === 'none' ? 'grid' : 'none';
        });
    }
    
    async saveSettings() {
        try {
            console.log('Saving settings for client ID:', this.clientId);
            
            const formData = new FormData();
            formData.append('clientId', this.clientId);
            formData.append('nickname', this.nicknameInput.value.trim());
            
            // Ëé∑ÂèñÂΩìÂâçÊòæÁ§∫ÁöÑÂ§¥ÂÉèË∑ØÂæÑ
            const currentAvatarSrc = this.currentAvatar.src;
            console.log('Current avatar src:', currentAvatarSrc);
            
            // Â¶ÇÊûúÊòØ‰∏ä‰º†ÁöÑÊñ∞Â§¥ÂÉè
            if (this.avatarInput.files[0]) {
                formData.append('avatar', this.avatarInput.files[0]);
            } 
            // Â¶ÇÊûúÊòØÈ¢ÑËÆæÂ§¥ÂÉèÊàñÈªòËÆ§Â§¥ÂÉè
            else if (currentAvatarSrc) {
                // ‰ªéÂÆåÊï¥URL‰∏≠ÊèêÂèñÊñá‰ª∂Âêç
                const fileName = decodeURIComponent(currentAvatarSrc.split('/').pop());
                const avatarUrl = `assets/avatars/${fileName}`;
                formData.append('avatarUrl', avatarUrl);
                console.log('Saving avatar URL:', avatarUrl);
            }
            
            const response = await fetch('api/save_settings.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            console.log('Save settings response:', result);
            
            if (result.success) {
                this.settingsModal.classList.remove('active');
                localStorage.setItem('chatNickname', this.nicknameInput.value.trim());
                if (result.data.avatar) {
                    localStorage.setItem('chatAvatar', result.data.avatar);
                    console.log('Saved avatar to localStorage:', result.data.avatar);
                    
                    // Á´ãÂç≥Êõ¥Êñ∞ÂΩìÂâçÊòæÁ§∫ÁöÑÂ§¥ÂÉè
                    this.currentAvatar.src = result.data.avatar;
                }
                alert('ËÆæÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ');
            } else {
                throw new Error(result.message || '‰øùÂ≠òÂ§±Ë¥•');
            }
            
        } catch (error) {
            console.error('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', error);
            alert('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•: ' + error.message);
        }
    }
    
    async loadSettings() {
        try {
            console.log('Loading settings for client ID:', this.clientId); // Ê∑ªÂä†Êó•Âøó
            
            // ‰ªéÊúçÂä°Âô®Ëé∑ÂèñËÆæÁΩÆ
            const response = await fetch(`api/get_settings.php?clientId=${this.clientId}`);
            const result = await response.json();
            
            console.log('Loaded settings:', result); // ‰øÆÊîπÊó•ÂøóÔºåÊòæÁ§∫ÂÆåÊï¥ÂìçÂ∫î
            
            if (result.success) {
                const settings = result.data;
                
                // ËÆæÁΩÆÊòµÁß∞
                if (settings.nickname) {
                    this.nicknameInput.value = settings.nickname;
                }
                
                // ËÆæÁΩÆÂ§¥ÂÉè
                if (settings.avatar) {
                    console.log('Setting avatar to:', settings.avatar); // Ê∑ªÂä†Êó•Âøó
                    this.currentAvatar.src = settings.avatar;
                    localStorage.setItem('chatAvatar', settings.avatar);
                } else {
                    console.log('Using default avatar'); // Ê∑ªÂä†Êó•Âøó
                    this.currentAvatar.src = 'assets/avatars/default.jpg';
                    localStorage.setItem('chatAvatar', 'assets/avatars/default.jpg');
                }
            }
        } catch (error) {
            console.error('Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•:', error);
            this.currentAvatar.src = 'assets/avatars/default.jpg';
            localStorage.setItem('chatAvatar', 'assets/avatars/default.jpg');
        }
    }
    
    async loadPresetAvatars() {
        try {
            const response = await fetch('api/get_preset_avatars.php');
            const result = await response.json();
            
            if (result.success) {
                // Ê∏ÖÁ©∫È¢ÑËÆæÂ§¥ÂÉèÂÆπÂô®
                this.presetAvatars.innerHTML = '';
                
                // ‰∏∫ÊØè‰∏™È¢ÑËÆæÂ§¥ÂÉèÂàõÂª∫ÂÖÉÁ¥†
                result.avatars.forEach(avatar => {
                    const img = document.createElement('img');
                    img.src = `assets/avatars/${avatar}`;
                    img.className = 'preset-avatar';
                    img.alt = 'È¢ÑËÆæÂ§¥ÂÉè';
                    
                    // ‰øÆÊîπÁÇπÂáª‰∫ã‰ª∂ÔºåÂè™Êõ¥Êñ∞ÊòæÁ§∫ÁöÑÂ§¥ÂÉèÔºå‰∏çËá™Âä®‰øùÂ≠ò
                    img.addEventListener('click', () => {
                        // Êõ¥Êñ∞ÊòæÁ§∫ÁöÑÂ§¥ÂÉè
                        this.currentAvatar.src = img.src;
                        
                        // ÁßªÈô§ÂÖ∂‰ªñÂ§¥ÂÉèÁöÑÈÄâ‰∏≠Áä∂ÊÄÅ
                        this.presetAvatars.querySelectorAll('.preset-avatar').forEach(avatar => {
                            avatar.classList.remove('selected');
                        });
                        
                        // Ê∑ªÂä†ÈÄâ‰∏≠Áä∂ÊÄÅ
                        img.classList.add('selected');
                    });
                    
                    this.presetAvatars.appendChild(img);
                });
            }
        } catch (error) {
            console.error('Âä†ËΩΩÈ¢ÑËÆæÂ§¥ÂÉèÂ§±Ë¥•:', error);
        }
    }
    
    // Ê∑ªÂä†Êñ∞ÊñπÊ≥ïÊù•ÂàùÂßãÂåñÁî®Êà∑Áä∂ÊÄÅ
    initializeUserStatus() {
        // È°µÈù¢ÂèØËßÅÊÄßÂèòÂåñÊó∂ÂèëÈÄÅÁä∂ÊÄÅ
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                // Âª∂ËøüÂèëÈÄÅÂä†ÂÖ•Ê∂àÊÅØÔºåÁ°ÆÔøΩÔøΩÔøΩËÆæÁΩÆÂ∑≤Âä†ËΩΩ
                setTimeout(() => this.sendUserStatus('join'), 1000);
            } else {
                this.sendUserStatus('leave');
            }
        });
        
        // È°µÈù¢ÂÖ≥Èó≠Êó∂ÂèëÈÄÅÁ¶ªÂºÄÊ∂àÊÅØ
        window.addEventListener('beforeunload', () => {
            // ‰ΩøÁî®ÂêåÊ≠• XMLHttpRequest Á°Æ‰øùÊ∂àÊÅØÂèëÈÄÅ
            const xhr = new XMLHttpRequest();
            const formData = new FormData();
            formData.append('clientId', this.clientId);
            formData.append('action', 'leave');
            formData.append('nickname', this.nicknameInput.value.trim() || 'ÂåøÂêçÁî®Êà∑');
            
            xhr.open('POST', 'api/user_status.php', false);
            xhr.send(formData);
        });
        
        // Âú®ËÆæÁΩÆÂä†ËΩΩÂÆåÊàêÂêéÂèëÈÄÅÂä†ÂÖ•Ê∂àÊÅØ
        this.loadSettings().then(() => {
            setTimeout(() => this.sendUserStatus('join'), 1000);
        });
    }

    async sendUserStatus(action) {
        try {
            const formData = new FormData();
            formData.append('clientId', this.clientId);
            formData.append('action', action);
            formData.append('nickname', this.nicknameInput.value.trim() || 'ÂåøÂêçÁî®Êà∑');
            
            const response = await fetch('api/user_status.php', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            if (!result.success) {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('ÂèëÈÄÅÁî®Êà∑Áä∂ÊÄÅÂ§±Ë¥•:', error);
        }
    }
}

// ÂàùÂßãÂåñËÅäÂ§©ÂÆ§
document.addEventListener('DOMContentLoaded', () => {
    new ChatRoom();
}); 